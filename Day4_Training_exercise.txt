# class - BankAccount
class BankAccount:
# , Attribute - Balance/name of customer
    def __init__(self, pbalance = 0, pname = "ANONYMOUS"):
        self.balance = pbalance
        self.name = pname
# method - debit (withdrawal), credit(deposit), get_balance, get_name, set_name(name)
    def credit(self, deposit):
        self.balance = self.balance + deposit

    def debit(self, withdrawal):
        self.balance = self.balance - withdrawal

    def get_name(self):
        return self.name

    def set_name(self, pname):
        self.name = pname
               
    def get_balance(self): # for demonsrtrating data abstraction
        return self.balance
        
# object - my_instance_1
customer = BankAccount(0, "Kathir")

#attributes and methods are members of class and object
print(customer.get_name(), " has Balance: ", customer.balance)
customer.credit(1000)
print(customer.get_name(), " has Balance: ", customer.balance)
customer.debit(200)
print(customer.get_name(), " has Balance: ", customer.balance)
customer.set_name("Kavin")
print(customer.get_name(), " has Balance: ", customer.balance)

#Datta Abstarction/hiding Python deosnt have a private keyword to hide data.
#just change .balance to .__balance everywhere
# AttributeError: 'BankAccount' object has no attribute 'balance' when you directly access it via customer.__balance
# You can use a getter method to get the private data.


# If you assign an aount to __balance and try to print customer.__balance, it will print as another instance.
# but if you use get_balance, it will ignore the million and retain the same value
customer.name = "Kavitha"
customer.__balance = 1000000
print(customer.name, " has Balance: ", customer.balance)

#Polymorphism - same function name but diff signature like len("kathir") and len([1,2,3])
class Person:
    def __init__(self, pname = "NONAME"):
        self.name = pname

    def get_name(self):
        return self.name

pers = Person()
for i in (customer, pers):
    print(i.get_name())

#inheritance - child funtion using the method of parent class.
class vip(Person):
    def get_starlevel(self):
        print ("I have 5 stars")

objVip = vip("Anitha")
print(objVip.get_name())
objVip.get_starlevel()
