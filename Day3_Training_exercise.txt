1. Threads - create threads for multiple bank
customers to deposit amount into your account.
The main program need to wait for all 
deposit threads to complete.


import threading
import time

class BankAccount():
    def __init__(self, initial_money=0, owner='Donation'):
        self.money = initial_money
        self.owner = owner
        self.history_file = open('C:/python/%s.txt' %owner, 'w')

    def execute_deposit(self, amount, by='A customer'):
        time.sleep(5)
        self.history_file.write('Customer %s is depositing %s to bank account of %s with balance %s\n' % (
        by, amount, self.owner, self.money))
        self.money += amount
        self.history_file.write('Account balance after %s deposit: %s\n' % (by, self.money))

    def __del__(self):
        self.history_file.close()

my_account = BankAccount(1000, "PythonTraining")
my_account.execute_deposit(100, "Customer 1")
my_account.execute_deposit(200, "Customer 2")


threads_list = []

for thread_num in range(10):
  t = threading.Thread(target=my_account.execute_deposit, args=(5000,'Customer %d' %thread_num))
  threads_list.append(t)
  t.start()

print("All threads are started")

[t.join() for t in threads_list]

print("All threads completed")

2. Email pretty straight forward- Please try the program given in the 
slide and email me in case of any errors/issues.

3. Parse an XML file and save required data to csv file.

#http://www.hindustantimes.com/rss/topnews/rssfeed.xml and save as topnewsfeed.xml
import csv
import xml.etree.ElementTree as ET


def parseXML(xmlfile):
    tree = ET.parse(xmlfile)
    root = tree.getroot()
    newsitems = []
    for item in root.findall('./channel/item'):
        news = {}
        for child in item:
            if child.tag == '{http://search.yahoo.com/mrss/}content':
                news['media'] = child.attrib['url']
            else:
                news[child.tag] = child.text.encode('utf8')
        newsitems.append(news)
    return newsitems


def savetoCSV(newsitems, filename):
    fields = ['guid', 'title', 'pubDate', 'description', 'link', 'media']
    with open(filename, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fields)
        writer.writeheader()
        writer.writerows(newsitems)


newsitems  = parseXML("C:/python/topnewsfeed.xml")
savetoCSV(newsitems, 'C:/python/topnews.csv')

4. Saving a dictionary in json file

#http://www.hindustantimes.com/rss/topnews/rssfeed.xml and save as topnewsfeed.xml
import json
import xml.etree.ElementTree as ET


def parseXML(xmlfile):
    tree = ET.parse(xmlfile)
    root = tree.getroot()
    newsitems = []
    news_dict = {}
    for item in root.findall('./channel/item'):
        news = {}
        for child in item:
            if child.tag == '{http://search.yahoo.com/mrss/}content':
                news['media'] = child.attrib['url']
                news_dict.update([(child.attrib['url'],1)])
            else:
                news[child.tag] = child.text.encode('utf8')
        newsitems.append(news)
    return news_dict


news_dict  = parseXML("C:/python/topnewsfeed.xml")
#print (news_dict)

news_json = json.dumps(news_dict, indent = 4, sort_keys=True)

print (news_json)


